import pandas as pd
configfile: "configs/config_main.yaml"

samples = pd.read_csv(config["METAFILE"], sep = '\t', header = 0)['sample']
input_path = config["OUTPUTPATH"]
end = config["END"]
pathin = config["OUTPUTPATH"]
intermediate_path = config["OUTPUTPATH"] +"/bamFile"
final_path = config["FINALOUTPUT"]

rule end:
    input:
        report = final_path + "/alignmentQC/report_align_count.html"

rule alignment:
    input:
        read1 = pathin + "/trim/{sample}_trimmed.fq.gz"
    params:
        index = config["GENOMEINDEX"],
        bamprefix = intermediate_path + "/{sample}_",
        annotation = config["ANNOTATION"],
        sampleid = "{sample}",
        outputpath = intermediate_path
    output:
        baminit = intermediate_path + "/{sample}_Aligned.sortedByCoord.out.bam"
    shell:
       """
       {config[TOOLSPATH]}/STAR  --runThreadN {config[NCORE]} --genomeDir {params.index} --readFilesIn {input.read1} --outFilterType BySJout --outFilterMultimapNmax 20 --alignSJoverhangMin 8 --alignSJDBoverhangMin 1 --readFilesCommand zcat --outFilterMismatchNmax 999 -outFilterMismatchNoverLmax 0.1 --alignIntronMin 20 --alignIntronMax 1000000 --alignMatesGapMax 1000000 --outSAMattributes NH HI NM MD  --outSAMtype BAM SortedByCoordinate --outFileNamePrefix {params.bamprefix}
       """
       
rule uniquely_mapped_reads:
    input:
       baminit = intermediate_path + "/{sample}_Aligned.sortedByCoord.out.bam"
    output:
       bam = final_path + "/bams/{sample}.bam"
    shell:
       """
       {config[TOOLSPATH]}/samtools view -bq 255 {input.baminit} -o {output.bam} &&  {config[TOOLSPATH]}/samtools index {output.bam}
       """

rule featureCount:
    input:
        bam = final_path + "/bams/{sample}.bam",
        annotation = config["ANNOTATION"]
    output:
        countreads = final_path + "/countFile/{sample}_count.tsv",
        count_summary = final_path + "/countFile/{sample}_count.tsv.summary"
    run:
        shell("{config[TOOLSPATH]}/featureCounts -T {config[NCORE]} -t exon -g {config[ATTRIBUTE]} -s {config[ORIENTATION]} -a {input.annotation} -o {output.countreads} {input.bam} && tail -n +3 {output.countreads} | cut -f1,7 > temp.{wildcards.sample} && mv temp.{wildcards.sample} {output.countreads}")

        
rule alignmentQC:
    input:
        bam = final_path + "/bams/{sample}.bam"
    output:
        bamqc = directory(final_path + "/alignmentQC/{sample}_BAMqc")
    shell:
        "{config[TOOLSPATH]}/qualimap bamqc -bam {input.bam} -nr 100000 --java-mem-size=40G -nt {config[NCORE]} -outdir {output.bamqc}"

rule summaryReport:
    input:
        bamqc = expand(final_path + "/alignmentQC/{sample}_BAMqc", sample = samples),
        count_summary = expand(final_path + "/countFile/{sample}_count.tsv.summary", sample = samples)
    output:
        report = final_path + "/alignmentQC/report_align_count.html"
    shell:
        "{config[TOOLSPATH]}/multiqc {input.bamqc} {input.count_summary} --filename {output.report}"

